---
import { getCollection } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import PostCard from '../../components/PostCard.astro';
import Header from '../../components/Header.astro';
import { SITE_TITLE } from '../../consts';

const allPosts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

// Extrair todas as tags únicas dos posts
const allTags = [...new Set(allPosts.flatMap(post => post.data.tags || []))];

// Categorias principais
const categories = [
	{ id: 'todos', name: 'Todos os Artigos', count: allPosts.length },
	{ id: 'arquitetura', name: 'Arquitetura de Sistemas', count: allPosts.filter(p => p.data.tags?.includes('arquitetura')).length },
	{ id: 'resiliencia', name: 'Resiliência e Performance', count: allPosts.filter(p => p.data.tags?.includes('resiliencia')).length },
	{ id: 'processamento-dados', name: 'Processamento de Dados', count: allPosts.filter(p => p.data.tags?.includes('processamento-dados')).length },
	{ id: 'java', name: 'Tecnologias Java', count: allPosts.filter(p => p.data.tags?.includes('java')).length },
	{ id: 'sistemas-distribuidos', name: 'Sistemas Distribuídos', count: allPosts.filter(p => p.data.tags?.includes('sistemas-distribuidos')).length }
];

// Obter categoria inicial da URL
const initialCategory = Astro.url.searchParams.get('categoria') || 'todos';
console.log('URL completa:', Astro.url.href);
console.log('Parâmetros da URL:', Object.fromEntries(Astro.url.searchParams.entries()));
console.log('Categoria extraída:', Astro.url.searchParams.get('categoria'));
console.log('Categoria inicial final:', initialCategory);
---

<!doctype html>
<html lang="pt-BR">
	<head>
		<BaseHead title={`Blog - ${SITE_TITLE}`} description="Artigos técnicos sobre arquitetura de software, microsserviços e sistemas distribuídos" />
	</head>
	<body class="bg-gray-50 text-gray-900 antialiased">
		<Header />
		<main class="min-h-screen">
			<div class="container py-8">
				<section class="text-center mb-16 py-12">
					<h1 class="blog-title mb-6">
						Blog
					</h1>
					<p class="blog-subtitle mb-8">
						Artigos técnicos sobre arquitetura de software, microsserviços e sistemas distribuídos
					</p>
				</section>

				{/* Filtros por Categoria */}
				<section class="mb-12">
					<div class="categories-filter">
						{categories.map((cat) => (
							<button 
								data-category={cat.id}
								class={`category-tag ${initialCategory === cat.id ? 'active' : ''}`}
							>
								{cat.name}
								<span class="category-count">({cat.count})</span>
							</button>
						))}
					</div>
				</section>

				{/* Container para posts filtrados */}
				<div id="posts-container">
					{/* Post em Destaque */}
					<section class="mb-16" id="featured-post">
						<h2 class="section-title mb-8">
							Artigo em Destaque
						</h2>
						<PostCard post={allPosts[0]} featured={true} />
					</section>

					{/* Posts em Grid */}
					{allPosts.length > 1 && (
						<section class="mb-16" id="other-posts">
							<h2 class="section-title mb-8">
								Outros Artigos
							</h2>
							<div class="posts-grid" id="posts-grid">
								{allPosts.slice(1).map((post) => (
									<PostCard post={post} />
								))}
							</div>
						</section>
					)}
				</div>

				{/* Mensagem quando não há posts */}
				<div id="no-posts-message" class="text-center py-16" style="display: none;">
					<h2 class="section-title mb-4">Nenhum artigo encontrado</h2>
					<p class="hero-description">Tente selecionar outra categoria.</p>
				</div>

				<section>
					<h2 class="section-title mb-8">
						Recursos
					</h2>
					<div class="topics-grid">
						<div class="topic-card">
							<h3 class="topic-title">
								RSS Feed
							</h3>
							<p class="topic-description mb-4">
								Acompanhe as atualizações do blog
							</p>
							<a href="/rss.xml" class="rss-link" target="_blank">
								Assinar RSS
							</a>
						</div>
						<div class="topic-card">
							<h3 class="topic-title">
								Arquivo
							</h3>
							<p class="topic-description">
								{allPosts.length} {allPosts.length === 1 ? 'artigo publicado' : 'artigos publicados'}
							</p>
						</div>
						<div class="topic-card">
							<h3 class="topic-title">
								Categorias
							</h3>
							<p class="topic-description">
								Arquitetura, Microsserviços, Performance
							</p>
						</div>
						<div class="topic-card">
							<h3 class="topic-title">
								Sobre o Autor
							</h3>
							<p class="topic-description">
								Software Engineer especializado em sistemas distribuídos
							</p>
						</div>
					</div>
				</section>
			</div>
		</main>
		<Footer />
		
		<style>
		/* Usando os mesmos estilos da homepage para consistência */
		.blog-title {
			font-size: 3rem;
			font-weight: 700;
			background: linear-gradient(to right, var(--color-primary), var(--color-accent));
			background-clip: text;
			-webkit-background-clip: text;
			color: transparent;
		}
		
		.blog-subtitle {
			font-size: 1.5rem;
			color: var(--color-text-muted);
			font-weight: 500;
		}
		
		.section-title {
			font-size: 1.875rem;
			font-weight: 700;
			color: var(--color-text-primary);
		}
		
		.hero-description {
			font-size: 1.125rem;
			color: var(--color-text-secondary);
			max-width: 48rem;
			margin: 0 auto;
			line-height: 1.625;
		}
		
		.post-meta {
			display: flex;
			align-items: center;
			flex-wrap: wrap;
			gap: 0.5rem;
		}
		
		.post-date {
			color: var(--color-primary);
			font-size: 0.875rem;
			font-weight: 500;
		}
		
		.post-updated {
			color: var(--color-text-muted);
			font-size: 0.875rem;
		}
		
		.post-title {
			font-size: 1.25rem;
			font-weight: 600;
			color: var(--color-text-primary);
			transition: color 200ms ease;
		}
		
		.post-title:hover {
			color: var(--color-primary);
		}
		
		.post-description {
			color: var(--color-text-muted);
			line-height: 1.625;
		}
		
		.topics-grid {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
			gap: 1.5rem;
		}
		
		.topic-card {
			background-color: var(--color-bg-primary);
			border-radius: var(--border-radius-xl);
			border: 1px solid var(--color-border);
			padding: 1.5rem;
			text-align: center;
			transition: all 300ms ease;
		}
		
		.topic-card:hover {
			box-shadow: var(--shadow-lg);
			transform: translateY(-0.25rem);
			border-color: var(--color-border-hover);
		}
		
		.topic-title {
			font-size: 1.125rem;
			font-weight: 600;
			color: var(--color-primary);
			margin-bottom: 0.75rem;
		}
		
		.topic-description {
			color: var(--color-text-muted);
			margin: 0;
		}
		
		.rss-link {
			display: inline-flex;
			align-items: center;
			gap: 0.5rem;
			color: var(--color-primary);
			text-decoration: none;
			font-weight: 500;
			padding: 0.5rem 1rem;
			border: 1px solid var(--color-primary);
			border-radius: 0.5rem;
			transition: all 200ms ease;
			font-size: 0.875rem;
		}
		
		.rss-link:hover {
			background-color: var(--color-primary);
			color: var(--color-text-inverse);
		}
		
		.categories-filter {
			display: flex;
			flex-wrap: wrap;
			gap: 0.75rem;
			justify-content: center;
			margin-bottom: 2rem;
		}
		
		.category-tag {
			display: inline-flex;
			align-items: center;
			gap: 0.5rem;
			padding: 0.5rem 1rem;
			border-radius: 2rem;
			text-decoration: none;
			font-weight: 500;
			font-size: 0.875rem;
			transition: all 200ms ease;
			border: 1px solid var(--color-border);
			background-color: var(--color-bg-primary);
			color: var(--color-text-secondary);
		}
		
		.category-tag:hover {
			border-color: var(--color-primary);
			color: var(--color-primary);
			transform: translateY(-1px);
		}
		
		.category-tag.active {
			background-color: var(--color-primary);
			color: var(--color-text-inverse);
			border-color: var(--color-primary);
		}
		
		.category-count {
			background-color: rgba(255, 255, 255, 0.2);
			padding: 0.125rem 0.5rem;
			border-radius: 1rem;
			font-size: 0.75rem;
			font-weight: 600;
		}
		
		.category-tag.active .category-count {
			background-color: rgba(255, 255, 255, 0.3);
		}
		
		@media (max-width: 768px) {
			.blog-title {
				font-size: 2.5rem;
			}
			
			.blog-subtitle {
				font-size: 1.25rem;
			}
			
			.topics-grid {
				grid-template-columns: 1fr;
			}
			
			.post-meta {
				flex-direction: column;
				align-items: flex-start;
				gap: 0.25rem;
			}
		}
		</style>

		<script define:vars={{ allPosts, initialCategory }}>
			// Dados dos posts
			const allPostsData = allPosts.map(post => ({
				id: post.id,
				title: post.data.title,
				description: post.data.description,
				pubDate: post.data.pubDate,
				tags: post.data.tags || []
			}));

			// Função para criar HTML de um post
			function createPostHTML(post, isFeatured = false) {
				const date = new Date(post.pubDate).toLocaleDateString('pt-BR', {
					year: 'numeric',
					month: 'short',
					day: 'numeric'
				});
				
				const cardClass = isFeatured ? 'featured-post' : 'post-card';
				const titleClass = isFeatured ? 'featured-post-title mb-3' : 'post-title mb-3';
				const descriptionClass = isFeatured ? 'featured-post-description' : 'post-description';
				const dateClass = isFeatured ? 'featured-post-date' : 'post-date';
				
				const tagsHTML = post.tags && post.tags.length > 0 ? `
					<div class="post-tags">
						${post.tags.slice(0, 3).map(tag => `<span class="post-tag">${tag}</span>`).join('')}
						${post.tags.length > 3 ? `<span class="post-tag-more">+${post.tags.length - 3}</span>` : ''}
					</div>
				` : '';
				
				const featuredCTA = isFeatured ? '<span class="featured-post-cta">Ler artigo completo →</span>' : '';
				
				return `
					<article class="${cardClass}">
						<a href="/blog/${post.id}/" class="block">
							<div class="post-meta mb-3">
								<time class="${dateClass}">${date}</time>
							</div>
							<h3 class="${titleClass}">${post.title}</h3>
							<p class="${descriptionClass}">${post.description}</p>
							${tagsHTML}
							${featuredCTA}
						</a>
					</article>
				`;
			}

			// Função para filtrar posts
			function filterPosts(category) {
				console.log('=== FILTRANDO ===', category);
				
				const postsContainer = document.getElementById('posts-container');
				const noPostsMessage = document.getElementById('no-posts-message');
				const featuredPost = document.getElementById('featured-post');
				const otherPosts = document.getElementById('other-posts');
				const postsGrid = document.getElementById('posts-grid');

				if (!postsContainer || !noPostsMessage || !featuredPost || !otherPosts || !postsGrid) {
					console.error('Elementos não encontrados');
					return;
				}

				// Filtrar posts
				const filteredPosts = category === 'todos' 
					? allPostsData 
					: allPostsData.filter(post => post.tags.includes(category));

				console.log('Posts filtrados:', filteredPosts.length);
				console.log('Posts encontrados:', filteredPosts.map(p => p.id));

				// Atualizar estado dos botões
				document.querySelectorAll('.category-tag').forEach(btn => {
					btn.classList.remove('active');
					if (btn.dataset.category === category) {
						btn.classList.add('active');
					}
				});

				// Mostrar/ocultar conteúdo
				if (filteredPosts.length === 0) {
					postsContainer.style.display = 'none';
					noPostsMessage.style.display = 'block';
				} else {
					postsContainer.style.display = 'block';
					noPostsMessage.style.display = 'none';

					if (category === 'todos') {
						// Estrutura original: destaque + grid
						featuredPost.style.display = 'block';
						otherPosts.style.display = 'block';
						
						// Primeiro post como destaque
						const featuredHTML = createPostHTML(filteredPosts[0], true);
						featuredPost.innerHTML = `
							<h2 class="section-title mb-8">Artigo em Destaque</h2>
							${featuredHTML}
						`;
						
						// Outros posts no grid
						if (filteredPosts.length > 1) {
							const gridHTML = filteredPosts.slice(1).map(post => createPostHTML(post, false)).join('');
							otherPosts.innerHTML = `
								<h2 class="section-title mb-8">Outros Artigos</h2>
								<div class="posts-grid" id="posts-grid">
									${gridHTML}
								</div>
							`;
						} else {
							otherPosts.style.display = 'none';
						}
					} else {
						// Filtro ativo: apenas grid uniforme
						featuredPost.style.display = 'none';
						otherPosts.style.display = 'block';
						
						const gridHTML = filteredPosts.map(post => createPostHTML(post, false)).join('');
						const title = filteredPosts.length === 1 ? 'Artigo Filtrado' : 'Artigos Filtrados';
						
						otherPosts.innerHTML = `
							<h2 class="section-title mb-8">${title}</h2>
							<div class="posts-grid" id="posts-grid">
								${gridHTML}
							</div>
						`;
					}
				}

				// Atualizar URL
				const url = new URL(window.location.href);
				if (category === 'todos') {
					url.searchParams.delete('categoria');
				} else {
					url.searchParams.set('categoria', category);
				}
				window.history.pushState({}, '', url);
			}

			// Adicionar event listeners
			document.addEventListener('DOMContentLoaded', function() {
				const buttons = document.querySelectorAll('.category-tag');
				
				buttons.forEach((btn) => {
					btn.addEventListener('click', function(e) {
						e.preventDefault();
						const category = this.dataset.category;
						if (category) {
							filterPosts(category);
						}
					});
				});

				// Aplicar filtro inicial
				console.log('=== INICIALIZAÇÃO DO BLOG ===');
				console.log('Categoria inicial (servidor):', initialCategory);
				console.log('URL atual (cliente):', window.location.href);
				console.log('Parâmetros da URL (cliente):', new URLSearchParams(window.location.search).toString());
				
				// Verificar se há parâmetro na URL do cliente
				const urlParams = new URLSearchParams(window.location.search);
				const clientCategory = urlParams.get('categoria');
				console.log('Categoria da URL (cliente):', clientCategory);
				
				// Usar a categoria do cliente se disponível, senão usar a do servidor
				const finalCategory = clientCategory || initialCategory;
				console.log('Categoria final:', finalCategory);
				
				if (finalCategory !== 'todos') {
					console.log('Aplicando filtro inicial:', finalCategory);
					setTimeout(() => {
						console.log('Executando filtro inicial...');
						filterPosts(finalCategory);
					}, 500);
				} else {
					console.log('Nenhum filtro inicial para aplicar');
				}
			});
		</script>
	</body>
</html>
