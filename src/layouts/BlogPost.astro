---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/Header.astro';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
---

<html lang="pt-BR">
	<head>
		<BaseHead title={title} description={description} />
	</head>

	<body class="bg-gray-50 text-gray-900 antialiased">
		<Header />
		<main class="min-h-screen">
			<article class="blog-article">
				{heroImage && (
					<div class="hero-image">
						<Image 
							width={1020} 
							height={510} 
							src={heroImage} 
							alt={title}
							class="hero-img"
							loading="lazy"
							decoding="async"
						/>
					</div>
				)}
				
				<div class="prose">
					<header class="blog-header">
						<div class="blog-meta">
							<time class="blog-date">
								<FormattedDate date={pubDate} />
							</time>
							{updatedDate && (
								<div class="blog-updated">
									Atualizado em <FormattedDate date={updatedDate} />
								</div>
							)}
						</div>
						<h1 class="blog-title">
							{title}
						</h1>
						<p class="blog-description">
							{description}
						</p>
					</header>
					
					<div class="blog-content">
						<slot />
					</div>
				</div>
			</article>
		</main>
		<Footer />
		
		<!-- Mermaid.js -->
		<script type="module">
			import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
			
			mermaid.initialize({
				startOnLoad: false,
				theme: 'default',
				flowchart: {
					useMaxWidth: true,
					htmlLabels: true,
					curve: 'cardinal'
				}
			});

			// Convert code blocks with language="mermaid" to rendered diagrams
			document.addEventListener('DOMContentLoaded', function() {
				const mermaidBlocks = document.querySelectorAll('pre[data-language="mermaid"]');
				
				mermaidBlocks.forEach((block, index) => {
					const codeElement = block.querySelector('code');
					const content = codeElement ? codeElement.textContent : block.textContent;
					const id = `mermaid-${index}`;
					
					// Create a div to replace the code block
					const div = document.createElement('div');
					div.className = 'mermaid';
					div.id = id;
					div.textContent = content;
					
					// Replace the pre element
					block.parentNode.replaceChild(div, block);
				});
				
				// Render all mermaid diagrams
				mermaid.run();
			});
		</script>
		
		<style>
		.blog-article {
			max-width: 56rem;
			margin: 0 auto;
			padding: 2rem 1rem;
		}
		
		.hero-image {
			margin-bottom: 2rem;
		}
		
		.hero-img {
			width: 100%;
			height: auto;
			border-radius: var(--border-radius-xl);
			box-shadow: var(--shadow-lg);
			object-fit: cover;
		}
		
		.blog-header {
			text-align: center;
			margin-bottom: 3rem;
			padding-bottom: 2rem;
			border-bottom: 1px solid var(--color-border);
		}
		
		.blog-meta {
			margin-bottom: 1rem;
		}
		
		.blog-date {
			color: var(--color-primary);
			font-weight: 500;
			font-size: 0.875rem;
			text-transform: uppercase;
			letter-spacing: 0.05em;
		}
		
		.blog-updated {
			color: var(--color-text-muted);
			font-size: 0.875rem;
			margin-top: 0.5rem;
		}
		
		.blog-title {
			font-size: 2.25rem;
			font-weight: 700;
			color: var(--color-text-primary);
			line-height: 1.25;
			margin-bottom: 1rem;
		}
		
		.blog-description {
			font-size: 1.25rem;
			color: var(--color-text-muted);
			margin: 0 auto;
			max-width: 48rem;
		}
		
		.blog-content {
			font-size: 1.125rem;
			line-height: 1.625;
		}
		
		/* Mermaid diagram styling */
		.mermaid {
			text-align: center;
			margin: 2rem 0;
			padding: 1.5rem;
			background: var(--color-bg-secondary);
			border-radius: var(--border-radius-lg);
			border: 1px solid var(--color-border);
			transition: background-color 300ms ease, border-color 300ms ease;
		}
		
		.mermaid svg {
			max-width: 100%;
			height: auto;
			filter: none;
		}
		
		/* Dark mode adjustments for Mermaid */
		:global(.dark) .mermaid {
			background: var(--color-bg-tertiary);
			border-color: var(--color-border);
		}
		
		:global(.dark) .mermaid svg {
			filter: brightness(0.95) contrast(1.1);
		}
		
		@media (max-width: 768px) {
			.blog-title {
				font-size: 1.875rem;
			}
			
			.blog-content {
				font-size: 1rem;
			}
		}
		</style>
	</body>
</html>
